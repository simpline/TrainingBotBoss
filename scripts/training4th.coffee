# Description:
#   The 4th week of Training - 研修4週目
#   4週目における課題は、仮想化環境の必要性を理解することである。
#   研修の中でアクセスが高負荷な環境は作り出せない為、作業的負荷を増大させ必要性を理解してもらう。
#
# Commands:
#   boss 16日目は何をしましょうか。
#   boss レプリケーションを設定しました。[苦労した点]
#   boss 17日目は何をしましょうか。
#   boss ApacheをAnsibleで作成してきました。[苦労した点]
#   boss 18日目は何をしましょうか。
#   boss WordpressをAnsibleで作成してきました。[苦労した点]
#   boss 19日目は何をしましょうか。
#   boss LBをAnsibleで作成してきました。[苦労した点]
#   boss 20日目は何をしましょうか。
#   boss CodeDeployでデプロイしてきました。[感想]
#
# Notes:
#   この内容はあえて言葉足らずにしてあるので、研修生に対してきちんとフォローすること。
#   VPCはデフォルトで構わないので、サブネットの割り振りを行うこと。
#
# Author:
#   miura-simpline <miura.daisuke@simpline.co.jp>

module.exports = (robot) ->
  robot.respond /16日目は何をしましょうか。/i, (res) ->
    res.reply """
              先週与えたお題に対する答えは出ましたでしょうか。
              その解とは、仮想化環境になります。
              もちろんVMwareもまた仮想化環境ですが、
              OSインストールには時間がかかってきたことだと思います。
              OSがすぐに用意されるのならば、もっと早くなったのではないでしょうか。
              では、実際にAWSを使用して、先週の環境を再現してみましょう。
              終わったら、「AWS上に環境を作成しました。[感想]」と報告してください。
              """

  robot.respond /AWS上に環境を作成しました。.*/i, (res) ->
    res.reply """
              AWSのインスタンスを作成するのは、簡単だったでしょうか。
              Ansibleを使用して、作成しましたでしょうか。
              用語として異なる部分があるので、戸惑ったかもしれません。
              一旦はこれでよしとしましょう。16日目はこれでおしまいです。
              """

  robot.respond /17日目は何をしましょうか。/i, (res) ->
    res.reply """
              昨日は愚直に環境を再現してもらったと思います。
              インスタンスなどの作成もコンソール上で行ったのではないでしょうか。
              しかしながら、これもまたAnsibleで実施できます。
              別の環境にしてもかまわないので、AWSもAnsibleで作成しましょう。
              終わったら、「AWSをAnsibleで作成してきました。[感想]」と報告してください。
              """

  robot.respond /AWSをAnsibleで作成してきました。.*/i, (res) ->
    res.reply """
              これでWordpress環境を作るのは非常に簡単になったと思います。
              実運用では本番環境、開発環境などと同じ環境を複数作成することがあります。
              そこで、今回の経験が役に立つと思います。
              それでは、明日からはもう少し細かい部分へと目を向けていく事にしましょう。
              17日目はこれでおしまいです。
              """

  robot.respond /18日目は何をしましょうか。/i, (res) ->
    res.reply """
              AWSには、単にインスタンスを作る以外にも様々なサービスがあります。
              たとえば、冗長化しなくていいといったLBは、
              AWSで用意されていてなおかつ冗長化されています。
              また、MySQLもサービスとして提供されています。
              レプリカもできますし、バックアップもされます。
              置き換えられるものは置き換えて、なおかつAnsibleで作成できるようにしましょう。
              終わったら、「LBをAnsibleで作成してきました。[感想]」と報告してください。
              """

  robot.respond /LBをAnsibleで作成してきました。.*/i, (res) ->
    res.reply """
              AWSのマネージドサービスを使うことで、作成だけでなく管理も簡単になったと思います。
              どちらを使うかは状況によりますので、適時判断してください。
              18日目はこれでおしまいです。
              """

  robot.respond /19日目は何をしましょうか。/i, (res) ->
    res.reply """
              昨日まででほぼAWSによる環境になったと思います。
              ただAWSによる恩恵はこれだけではありません。
              今よりもさらにアクセスが高い状況になったら、どうしましょうか。
              スケールアップかスケールアウトの必要があります。
              これもまたAWSで実現できるので設定してみましょう。
              それぞれのサーバで何を基準にアップアウトを決めればいいか考えましょう。
              終わったら、「AWSをスケールアウトさせてきました。[感想]」と報告してください。
              """

  robot.respond /AWSをスケールアウトさせてきました。.*/i, (res) ->
    res.reply """
              これでインフラの構築としては自由自在になったと思います。
              では、アプリを含めてはどうでしょうか。
              明日はアプリも連動して、構成されるように考えてみましょう。
              19日目はこれでおしまいです。
              """

  robot.respond /20日目は何をしましょうか。/i, (res) ->
    res.reply """
              アプリに関してもAWSは機能を提供しています。
              CodeDeployです。
              本来はCodeCommitにコードを登録した上でできるといいのですが、
              使用できる環境が限られるのでS3かGithubにコードを保管して実施してください。
              終わったら、「CodeDeployでデプロイしてきました。[感想]」と報告してください。
              """

  robot.respond /CodeDeployでデプロイしてきました。.*/i, (res) ->
    res.reply """
              うまくできましたでしょうか。
              これであなたは環境を提供する事に注力する必要はほぼなくなりました。
              では、何をしたらいいでしょうか。
              この環境をよりよくしていくことにしましょう。
              性能を高めるも、耐障害性を高めるも、やるべきことはまだまだあります。
              インフラの世界はまだまだ広いです。
              この研修では多くのことを学んだと思いますが、
              これからも精進していってください。
              20日目はこれでおしまいです。
              """
